<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://web-harvest.sourceforge.net/schema/1.0/config" scriptlang="groovy">
	
	<script><![CDATA[ 
		TP = 0
		Extr = 0
	]]></script>

	<var-def name="extracted">
		<datastore name="ass3_extracted">
			select * from @this
		</datastore>
	</var-def>

	<loop item="gold">
		<list>
			<datastore name="mle_assignment_3">
				select * from @this
			</datastore>
		</list>
		<body>
			<var-def name="gold_invoice_amount">
				<xpath expression="//invoice_amount">
					<html-to-xml>
						<template>${gold.get('tagged_text')}</template>
					</html-to-xml>
				</xpath>
			</var-def>
			<script><![CDATA[
				import java.text.DecimalFormat;
				println gold.get("id").toString() + " ---- GOLD"
				for (value in extracted) {
					if(value.get("id").toString().equals(gold.get("id").toString())) {
						println value.toString() + " ---- EXTR"
						if (!value.get("invoice_amount").toString().equals("")) {
							println "NOT EMPTY"
							Extr++
							
							try {
								DecimalFormat formatter = DecimalFormat.getInstance(Locale.US);
								formatter.setMinimumFractionDigits(2)
								gold_amount = gold_invoice_amount.get(0).getWrappedObject().toString()
								gold_amount = gold_amount.substring(gold_amount.indexOf("data-value=\"") + 12, gold_amount.indexOf("\">"))
								println gold_amount + " ---- GOLD AMOUNT"
								extracted_amount = value.get("invoice_amount").toString()
								extracted_amount_str = formatter.format(Double.parseDouble(extracted_amount.replace(",", ".")))
								println extracted_amount_str + " ---- EXTR AMOUNT"
								if (extracted_amount_str.equals(gold_amount)) {
									println "GOOD"
									TP++
								}
								
							} catch (NumberFormatException e) {
							
							}
							
						} else {
							println "EMPTY"
						}
					}
				} 
			]]></script>
		</body>
	</loop>

	<script><![CDATA[
		println TP
		println Extr
		
		sys.defineVariable("pr", TP / Extr)
		sys.defineVariable("re", TP / 100)
	]]></script>


	<script><![CDATA[
        Map insertedParamMap = new HashMap();
        insertedParamMap.put("tp", TP);
        insertedParamMap.put("extr", Extr);
        insertedParamMap.put("count", "1");
        jsonValueMap = new com.google.gson.Gson().toJson(insertedParamMap);
    ]]></script>
    <insert-datastore datastore-name="ass3_pr_re_ys"
                      json-value-map="${jsonValueMap}"/>
	
	<var-def name="id_count">
		<datastore name="ass3_pr_rc_ys">
			<template>select * from @this</template>
		</datastore>
	</var-def>
	
	<script><![CDATA[ 
		count = id_count.size()
	]]></script>
	
	
	<script><![CDATA[ 
		log(result)
		TP_res = 0
		Extr_res = 0
		for (value in result) {
			TP_res += Integer.parseInt(value.get("tp").toString())
			Extr_res += Integer.parseInt(value.get("extr").toString())
		}
		pr = TP_res / Extr_res
		re = TP_res / 100
	]]></script>
	
	
	
    <export include-original-data="false">
    	<single-column name="count" value="${count}" />
    </export>

</config>